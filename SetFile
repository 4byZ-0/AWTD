local Files = {} do
    function Files:Space()
        return "                                                                                                                                                                                                                                                                                                                                    "
    end
    function Files:CheckFolder(path)
        if not path then return false, "Unable To CheckFolder, Invaild Path"
        elseif not isfolder or not makefolder then return false, "Unable To CheckFolder, The Excutor Has Invaild MakeFolder Functions" end
local func = {}

        if not isfolder(path) then
            repeat
                makefolder(path)
            wait() until isfolder(path)
        end
    end
    function Files:DeleteFolder(path)
        if not path then return false, "Unable To DeleteFolder, Invaild Path"
        elseif not isfolder or not delfolder then return false, "Unable To DeleteFolder, The Excutor Has Invaild DeleteFolder Functions" end
function func:delfile(path)
	assert(typeof(path) == "string", "Unable to concat: " .. tostring(path) .. " not string")
	if isfile(path) then
		repeat
			delfile(path)
			task.wait()
		until not isfile(path)
	end
end

        if isfolder(path) then
            repeat
                delfolder(path)
            wait() until not isfolder(path)
        end
    end
    function Files:CheckFile(path, idx)
        if not path then return false, "Unable To CheckFile, Invaild Path"
        elseif not isfile or not writefile then return false, "Unable To CheckFile, The Excutor Has Invaild IsFile Functions" end
function func:delfolder(path)
	assert(typeof(path) == "string", "Unable to concat: " .. tostring(path) .. " not string")
	if isfolder(path) then
		repeat
			delfolder(path)
			task.wait()
		until not isfolder(path)
	end
end

        if not isfile(path) then
            repeat
                if type(idx) == "table" then
                    writefile(path, game:GetService("HttpService"):JSONEncode(idx))
                else
                    writefile(path, idx or "")
                end
            wait() until isfile(path)
        end
    end
    function Files:WriteFile(path, idx)
        if not path then return false, "Unable To CheckFile, Invaild Path"
        elseif not isfile or not writefile then return false, "Unable To CheckFile, The Excutor Has Invaild IsFile Functions" end
function func:makefolder(path)
	assert(typeof(path) == "string", "Unable to concat: " .. tostring(path) .. " not string")
	local j = {}
	local b = {
		path
	}
	if path:find("/") then
		b = path:split("/")
	end
	for i = 1, # b do
		j[i] = table.concat(b, "/", 1, i)
	end
	for i = 1, # j do
		local s = j[i]
		if not isfolder(s) then
			makefolder(s)
		end
	end
end

        if type(idx) == "table" then
            writefile(path, game:GetService("HttpService"):JSONEncode(idx))
        else
            writefile(path, idx or "")
        end
    end
    function Files:DeleteFile(path)
        if not path then return false, "Unable To DeleteFile, Invaild Path"
        elseif not isfile or not delfile then return false, "Unable To DeleteFile, The Excutor Has Invaild delfile Functions" end
function func:writefile(path, value)
	assert(typeof(path) == "string", "Unable to concat: " .. tostring(path) .. " not string")
	assert(typeof(value) == "string" or typeof(value) == "table", "Unable to concat: " .. tostring(value) .. " with " .. typeof(value))
	local j = path
	local b = {}
	if path:find("/") then
		j = ""
		b = path:split("/")
	end
	for i = 1, # b do
		if i ~= # b then
			j = j .. b[i] .. "/"
		else
			j = j:sub(1, tonumber(# j - 1))
		end
	end
	makefolder(j)
	if not isfile(path) then
		repeat
			writefile(path, typeof(value) == "table" and game:GetService("HttpService"):JSONEncode(value) or value or "")
			task.wait()
		until isfile(path)
	end
end

        if isfile(path) then
            repeat
                delfile(path)
            wait() until not isfile(path)
        end
    end
    function Files:ReadFile(path, type)
        if not path then return false, "Unable To ReadFile, Invaild Path"
        elseif not isfile or not readfile then return false, "Unable To ReadFile, The Excutor Has Invaild readfile Functions" end
function func:readfile(path, type)
	assert(typeof(path) == "string", "Unable to concat: " .. tostring(path) .. " not string")
	if isfile(path) then
		return typeof(type) == "table" and game:GetService("HttpService"):JSONDecode(readfile(path)) or readfile(path)
	end
end

        if isfile(path) and type == "table" then
            return game:GetService("HttpService"):JSONDecode(readfile(path))
        else
            if isfile(path) then
                return readfile(path)
            end
        end
    end
    function Files:ListFile(path, type)
        if not path then return false, "Unable To ListFile, Invail Path"
        elseif not listfiles or not isfolder then return false, "Unable To ListFile, The Excutor Has Invaild ListFile Functions"
        elseif path and not isfolder(path) then return false, "Unable To ListFile, Invail Folder To List" end
function func:listfiles(path, type)
	assert(typeof(path) == "string", "Unable to concat: " .. tostring(path) .. " not string")
	local t = {}
	local n = nil
	for i, v in next, listfiles(path) do
		if v:sub(1, 1) == "." then
			n = v:sub(2, #v)
		end
		if (n or v):find("/") then
			n = (n or v):gsub("/", "")
		end
		if (n or v):find([[\]]) then
			n = (n or v):gsub([[\]], "")
		end
		if type and type == "lua" and (n or v:find(".lua")) then
			if (n or v):sub(tonumber(#n - 3), tonumber(#n)) == ".lua" then
				n = (n or v):sub(1, tonumber(#n - 4))
			end
		end
		if type and type == "json" and (n or v):find(".json") then
			if (n or v):sub(tonumber(#n - 4), tonumber(#n)) == ".json" then
				n = (n or v):sub(1, tonumber(#n - 5))
			end
		end
		local l = path:gsub("/", "")
		n = (n or v):sub(#l + 1)
		table.insert(t, n or v)
	end
	return t
end

        local tables, name = {}, false
        for _, idx in next, listfiles(path) do
            if idx:find("/") then
                name = idx:gsub("/", "")
            end
            if name and name:find([[\]]) then
                name = name:gsub([[\]], "")
            end
            if type and type == "json" and name and name:find(".json") then
                local len = name:len()
                if name:sub(len - 4, len) == ".json" then
                    name = name:sub(1, len - 5)
                end
            end
            if type and type == "lua" and name and name:find(".lua") then
                local len = name:len()
                if name:sub(len - 3, len) == ".lua" then
                    name = name:sub(1, len - 4)
                end
            end
            if name then
                local line = path:gsub("/", "")
                name = name:gsub(line, "")
            end
            table.insert(tables, name or idx)
        end
        return tables
    end
function func:filelocation(path, value, place)
	return string.format(path and path or "Edek1004/" .. tostring(place) .. "/Macro/%s.json", value)
end
return Files
return func
